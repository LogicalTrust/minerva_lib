DIGIT          =  %x30-39 ;
SP = %x20 ;
HTAB = %x09 ;
DQUOTE = %x22 ;
CRLF           =  CR LF ;
CR             =  %x0D ;
LF             =  %x0A ;
OCTET          =  %x00-FF ;
HEXDIG         =  DIGIT / "A" / "B" / "C" / "D" / "E" / "F" ;
VCHAR          =  %x21-7E ;
ALPHA          =  %x41-5A / %x61-7A   ;
Accept = [ ( media-range [ weight ] ) *( OWS "," OWS ( media-range [ weight ] ) ) ] ;
Accept-Charset = [ ( ( token / "*" ) [ weight ] ) *( OWS "," OWS ( ( token / "*" ) [ weight ] ) ) ] ;
Accept-Encoding = [ ( codings [ weight ] ) *( OWS "," OWS ( codings [ weight ] ) ) ] ;
Accept-Language = [ ( language-range [ weight ] ) *( OWS "," OWS ( language-range [ weight ] ) ) ] ;
Accept-Ranges = acceptable-ranges ;
Age = delta-seconds ;
Allow = [ method *( OWS "," OWS method ) ] ;
Authentication-Info = [ auth-param *( OWS "," OWS auth-param ) ] ;
Authorization = credentials ;
BWS = OWS ;
Cache-Control = [ cache-directive *( OWS "," OWS cache-directive ) ] ;
Connection = [ connection-option *( OWS "," OWS connection-option ) ] ;
Content-Encoding = [ content-coding *( OWS "," OWS content-coding ) ] ;
Content-Language = [ language-tag *( OWS "," OWS language-tag ) ] ;
Content-Length = 1*DIGIT ;
Content-Location = absolute-URI / partial-URI ;
Content-Range = range-unit SP ( range-resp / unsatisfied-range ) ;
Content-Type = media-type ;
Date = HTTP-date ;
ETag = entity-tag ;
Expect = [ expectation *( OWS "," OWS expectation ) ] ;
Expires = HTTP-date ;
From = mailbox ;
GMT = %x47.4D.54  ;
HTTP-date = IMF-fixdate / obs-date ;
HTTP-message = start-line CRLF *( field-line CRLF ) CRLF [ message-body ] ;
HTTP-name = %x48.54.54.50  ;
HTTP-version = HTTP-name "/" DIGIT "." DIGIT ;
Host = uri-host [ ":" port ] ;
IMF-fixdate = day-name "," SP date1 SP time-of-day SP GMT ;
If-Match = "*" / [ entity-tag *( OWS "," OWS entity-tag ) ] ;
If-Modified-Since = HTTP-date ;
If-None-Match = "*" / [ entity-tag *( OWS "," OWS entity-tag ) ] ;
If-Range = entity-tag / HTTP-date ;
If-Unmodified-Since = HTTP-date ;
Last-Modified = HTTP-date ;
Location = URI-reference ;
Max-Forwards = 1*DIGIT ;
OWS = *( SP / HTAB ) ;
Proxy-Authenticate = [ challenge *( OWS "," OWS challenge ) ] ;
Proxy-Authentication-Info = [ auth-param *( OWS "," OWS auth-param ) ] ;
Proxy-Authorization = credentials ;
RWS = 1*( SP / HTAB ) ;
Range = ranges-specifier ;
Referer = absolute-URI / partial-URI ;
Retry-After = HTTP-date / delay-seconds ;
Server = product *( RWS ( product / comment ) ) ;
TE = [ t-codings *( OWS "," OWS t-codings ) ] ;
Trailer = [ field-name *( OWS "," OWS field-name ) ] ;
Transfer-Encoding = [ transfer-coding *( OWS "," OWS transfer-coding ) ] ;
Upgrade = [ protocol *( OWS "," OWS protocol ) ] ;
User-Agent = product *( RWS ( product / comment ) ) ;
Vary = [ ( "*" / field-name ) *( OWS "," OWS ( "*" / field-name ) ) ] ;
Via = [ ( received-protocol RWS received-by [ RWS comment ] ) *( OWS "," OWS ( received-protocol RWS received-by [ RWS comment ] ) ) ] ;
WWW-Authenticate = [ challenge *( OWS "," OWS challenge ) ] ;
absolute-form = absolute-URI ;
absolute-path = 1*( "/" segment ) ;
acceptable-ranges = range-unit *( OWS "," OWS range-unit ) ;
asctime-date = day-name SP date3 SP time-of-day SP year ;
asterisk-form = "*" ;
auth-param = token BWS "=" BWS ( token / quoted-string ) ;
auth-scheme = token ;
authority-form = uri-host ":" port ;
cache-directive = token [ "=" ( token / quoted-string ) ] ;
challenge = auth-scheme [ 1*SP ( token68 / [ auth-param *( OWS "," OWS auth-param ) ] ) ] ;
chunk = chunk-size [ chunk-ext ] CRLF chunk-data CRLF ;
chunk-data = 1*OCTET ;
chunk-ext = *( BWS ";" BWS chunk-ext-name [ BWS "=" BWS chunk-ext-val ] ) ;
chunk-ext-name = token ;
chunk-ext-val = token / quoted-string ;
chunk-size = 1*HEXDIG ;
chunked-body = *chunk last-chunk trailer-section CRLF ;
codings = content-coding / "identity" / "*" ;
comment = "(" *( ctext / quoted-pair / comment ) ")" ;
complete-length = 1*DIGIT ;
connection-option = token ;
content-coding = token ;
credentials = auth-scheme [ 1*SP ( token68 / [ auth-param *( OWS "," OWS auth-param ) ] ) ] ;
ctext = HTAB / SP / %x21-27  / %x2A-5B  / %x5D-7E  / obs-text ;
date1 = day SP month SP year ;
date2 = day "-" month "-" 2DIGIT ;
date3 = month SP ( 2DIGIT / ( SP DIGIT ) ) ;
day = 2DIGIT ;
day-name = %x4D.6F.6E  / %x54.75.65  / %x57.65.64  / %x54.68.75  / %x46.72.69  / %x53.61.74  / %x53.75.6E  ;
day-name-l = %x4D.6F.6E.64.61.79  / %x54.75.65.73.64.61.79  / %x57.65.64.6E.65.73.64.61.79  / %x54.68.75.72.73.64.61.79  / %x46.72.69.64.61.79  / %x53.61.74.75.72.64.61.79 / %x53.75.6E.64.61.79  ;
delay-seconds = 1*DIGIT ;
delta-seconds = 1*DIGIT ;
entity-tag = [ weak ] opaque-tag ;
etagc = "!" / %x23-7E / obs-text ;
expectation = token [ "=" ( token / quoted-string ) parameters ] ;
field-content = field-vchar [ 1*( SP / HTAB / field-vchar ) field-vchar ] ;
field-line = field-name ":" OWS field-value OWS ;
field-name = token ;
field-value = *field-content ;
field-vchar = VCHAR / obs-text ;
first-pos = 1*DIGIT ;
hour = 2DIGIT ;
http-URI = "http://" authority path-abempty [ "?" query ] ;
https-URI = "https://" authority path-abempty [ "?" query ] ;
incl-range = first-pos "-" last-pos ;
int-range = first-pos "-" [ last-pos ] ;
language-range = <language-range, see [RFC4647], Section 2.1> ;
language-tag = <Language-Tag, see [RFC5646], Section 2.1> ;
last-chunk = 1*"0" [ chunk-ext ] CRLF ;
last-pos = 1*DIGIT ;
mailbox = <mailbox, see [RFC5322], Section 3.4> ;
media-range = ( "*/*" / ( type "/*" ) / ( type "/" subtype ) ) parameters ;
media-type = type "/" subtype parameters ;
message-body = *OCTET ;
method = token ;
minute = 2DIGIT ;
month = %x4A.61.6E / %x46.65.62 / %x4D.61.72 / %x41.70.72 / %x4D.61.79 / %x4A.75.6E / %x4A.75.6C / %x41.75.67 / %x53.65.70 / %x4F.63.74 / %x4E.6F.76 / %x44.65.63  ;
obs-date = rfc850-date / asctime-date ;
obs-fold = OWS CRLF RWS ;
obs-text = %x80-FF ;
opaque-tag = DQUOTE *etagc DQUOTE ;
origin-form = absolute-path [ "?" query ] ;
other-range = 1*( %x21-2B  / %x2D-7E  ) ;
parameter = parameter-name "=" parameter-value ;
parameter-name = token ;
parameter-value = ( token / quoted-string ) ;
parameters = *( OWS ";" OWS [ parameter ] ) ;
partial-URI = relative-part [ "?" query ] ;
product = token [ "/" product-version ] ;
product-version = token ;
protocol = protocol-name [ "/" protocol-version ] ;
protocol-name = token ;
protocol-version = token ;
pseudonym = token ;
qdtext = HTAB / SP / "!" / %x23-5B  / %x5D-7E  / obs-text ;
quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text ) ;
quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE ;
qvalue = ( "0" [ "." *3DIGIT ] ) / ( "1" [ "." *3"0" ] ) ;
range-resp = incl-range "/" ( complete-length / "*" ) ;
range-set = range-spec *( OWS "," OWS range-spec ) ;
range-spec = int-range / suffix-range / other-range ;
range-unit = token ;
ranges-specifier = range-unit "=" range-set ;
reason-phrase = 1*( HTAB / SP / VCHAR / obs-text ) ;
received-by = pseudonym [ ":" port ] ;
received-protocol = [ protocol-name "/" ] protocol-version ;
request-line = method SP request-target SP HTTP-version ;
request-target = origin-form / absolute-form / authority-form / asterisk-form ;
rfc850-date = day-name-l "," SP date2 SP time-of-day SP GMT ;
second = 2DIGIT ;
start-line = request-line / status-line ;
status-code = 3DIGIT ;
status-line = HTTP-version SP status-code SP [ reason-phrase ] ;
subtype = token ;
suffix-length = 1*DIGIT ;
suffix-range = "-" suffix-length ;
t-codings = "trailers" / ( transfer-coding [ weight ] ) ;
tchar = "!" / "#" / "$" / "%" / "&" / "'" / "*" / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~" / DIGIT / ALPHA ;
time-of-day = hour ":" minute ":" second ;
token = 1*tchar ;
token68 = 1*( ALPHA / DIGIT / "-" / "." / "_" / "~" / "+" / "/" ) *"=" ;
trailer-section = *( field-line CRLF ) ;
transfer-coding = token *( OWS ";" OWS transfer-parameter ) ;
transfer-parameter = token BWS "=" BWS ( token / quoted-string ) ;
type = token ;
unsatisfied-range = "*/" complete-length ;
uri-host = host ;
weak = %x57.2F  ;
weight = OWS ";" OWS "q=" qvalue ;
year = 4DIGIT ;

URI           = scheme ":" hier_part [ "?" query ] [ "#" fragment  ] ;

hier_part     = "//" authority path_abempty
	 / path_absolute
	 / path_rootless
	 / path_empty ;

URI_reference = URI / relative_ref ;

absolute_URI  = scheme ":" hier_part [ "?" query ] ;

relative_ref  = relative_part [ "?" query ] [ "#" fragment ] ;

relative_part = "//" authority path_abempty
	 / path_absolute
	 / path_noscheme
	 / path_empty ;

scheme        = "http" ; IGNORE: / ALPHA *( ALPHA / DIGIT / "+" / "_" / "." )

authority     = [ userinfo "@" ] host [ ":" port ] ;
userinfo      = *( unreserved / pct_encoded / sub_delims / ":" ) ;
host          = IP_literal / IPv4address / reg_name ;
port          = *DIGIT ; 

IP_literal    = "[" ( IPv6address / IPvFuture  ) "]" ; 

IPvFuture     = "v" 1*HEXDIG "." 1*( unreserved / sub_delims / ":" ) ; 

IPv6address   =                            6( h16 ":" ) ls32
	 /                       "::" 5( h16 ":" ) ls32
	 / [               h16 ] "::" 4( h16 ":" ) ls32
	 / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
	 / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
	 / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
	 / [ *4( h16 ":" ) h16 ] "::"              ls32
	 / [ *5( h16 ":" ) h16 ] "::"              h16
	 / [ *6( h16 ":" ) h16 ] "::" ; 

h16           = 1*4HEXDIG ;
ls32          = ( h16 ":" h16 ) / IPv4address ;
IPv4address   = dec_octet "." dec_octet "." dec_octet "." dec_octet ;

dec_octet     = DIGIT            
	 / %x31-39 DIGIT         
	 / "1" 2DIGIT            
	 / "2" %x30-34 DIGIT    
	 / "25" %x30-35 ;

reg_name      = *( unreserved / pct_encoded / sub_delims ) ;

path          = path_abempty    
	 / path_absolute   
	 / path_noscheme 
	 / path_rootless   
	 / path_empty      ; 

path_abempty  = *( "/" segment ) ;
path_absolute = "/" [ segment_nz *( "/" segment ) ] ;
path_noscheme = segment_nz_nc *( "/" segment ) ;
path_rootless = segment_nz *( "/" segment ) ; 
path_empty    = 0<pchar> ;

segment       = *pchar ;
segment_nz    = 1*pchar ;
segment_nz_nc = 1*( unreserved / pct_encoded / sub_delims / "@" )
	 ; non_zero_length segment without any colon ":" ;

pchar         = unreserved / pct_encoded / sub_delims / ":" / "@" ;

query         = *( pchar / "/" / "?" ) ;

fragment      = *( pchar / "/" / "?" ) ;

pct_encoded   = "%" HEXDIG HEXDIG ;

unreserved    = ALPHA / DIGIT / "_" / "." / "_" / "~" ;
reserved      = gen_delims / sub_delims ; 
gen_delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@" ;
sub_delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 / "*" / "+" / "," / ";" / "=" ;


