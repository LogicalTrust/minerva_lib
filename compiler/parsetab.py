
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '9AED083951749179C5295050AEC41F72'
    
_lr_action_items = {'COMMENT':([0,1,2,4,5,6,8,19,20,22,42,45,],[5,5,-6,-3,-7,-4,-5,-8,-9,-10,-12,-11,]),'RCHEVRON':([39,40,46,],[-20,44,-19,]),'STRUCT':([0,1,2,4,5,6,8,19,20,22,23,29,42,45,],[13,13,-6,-3,-7,-4,-5,-8,-9,-10,13,13,-12,-11,]),'MIINCLUDE':([0,1,2,4,5,6,8,19,20,22,42,45,],[14,14,-6,-3,-7,-4,-5,-8,-9,-10,-12,-11,]),'UNION':([0,1,2,4,5,6,8,19,20,22,23,29,42,45,],[10,10,-6,-3,-7,-4,-5,-8,-9,-10,10,10,-12,-11,]),'INCLUDEFILE':([11,],[19,]),'LCHEVRON':([3,9,16,18,21,27,31,],[-22,-25,-21,-24,-23,32,32,]),'PTR':([3,9,18,21,],[16,-25,-24,-23,]),'LBRACKET':([17,],[23,]),'INCLUDEFILELOCAL':([11,14,],[20,22,]),'COMMA':([3,9,16,18,21,25,27,31,33,34,38,39,44,],[-22,-25,-21,-24,-23,29,-26,-26,-18,-16,-15,43,-17,]),'ARROW':([26,28,],[30,35,]),'SEPARATOR':([37,41,],[42,45,]),'RBRACKET':([3,9,16,18,21,23,24,25,27,31,33,34,36,38,44,],[-22,-25,-21,-24,-23,26,28,-14,-26,-26,-18,-16,-13,-15,-17,]),'INCLUDE':([0,1,2,4,5,6,8,19,20,22,42,45,],[11,11,-6,-3,-7,-4,-5,-8,-9,-10,-12,-11,]),'$end':([1,2,4,5,6,8,12,15,19,20,22,42,45,],[-2,-6,-3,-7,-4,-5,0,-1,-8,-9,-10,-12,-11,]),'STRING':([0,1,2,3,4,5,6,7,8,9,10,13,16,18,19,20,21,22,23,27,29,30,32,35,42,43,45,],[9,9,-6,-22,-3,-7,-4,17,-5,-25,18,21,-21,-24,-8,-9,-23,-10,9,31,9,37,39,41,-12,39,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'decl':([0,1,],[1,1,]),'function':([0,1,],[8,8,]),'type_basic':([0,1,23,29,],[3,3,3,3,]),'miinclude':([0,1,],[4,4,]),'args':([23,29,],[24,36,]),'comment':([0,1,],[2,2,]),'empty':([27,31,],[33,33,]),'arg':([23,29,],[25,25,]),'decls':([0,1,],[12,15,]),'include':([0,1,],[6,6,]),'type':([0,1,23,29,],[7,7,27,27,]),'var_flags':([27,31,],[34,38,]),'var_arg_flags':([32,43,],[40,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> decls","S'",1,None,None,None),
  ('decls -> decl decls','decls',2,'p_decls','parser.py',45),
  ('decls -> decl','decls',1,'p_decls','parser.py',46),
  ('decl -> miinclude','decl',1,'p_decl','parser.py',58),
  ('decl -> include','decl',1,'p_decl','parser.py',59),
  ('decl -> function','decl',1,'p_decl','parser.py',60),
  ('decl -> comment','decl',1,'p_decl','parser.py',61),
  ('comment -> COMMENT','comment',1,'p_comment','parser.py',66),
  ('include -> INCLUDE INCLUDEFILE','include',2,'p_include','parser.py',69),
  ('include -> INCLUDE INCLUDEFILELOCAL','include',2,'p_include','parser.py',70),
  ('miinclude -> MIINCLUDE INCLUDEFILELOCAL','miinclude',2,'p_miinclude','parser.py',74),
  ('function -> type STRING LBRACKET args RBRACKET ARROW STRING SEPARATOR','function',8,'p_function','parser.py',79),
  ('function -> type STRING LBRACKET RBRACKET ARROW STRING SEPARATOR','function',7,'p_function','parser.py',80),
  ('args -> arg COMMA args','args',3,'p_args','parser.py',87),
  ('args -> arg','args',1,'p_args','parser.py',88),
  ('arg -> type STRING var_flags','arg',3,'p_arg','parser.py',98),
  ('arg -> type var_flags','arg',2,'p_arg','parser.py',99),
  ('var_flags -> LCHEVRON var_arg_flags RCHEVRON','var_flags',3,'p_var_flags','parser.py',108),
  ('var_flags -> empty','var_flags',1,'p_var_flags','parser.py',109),
  ('var_arg_flags -> STRING COMMA var_arg_flags','var_arg_flags',3,'p_var_arg_flags','parser.py',118),
  ('var_arg_flags -> STRING','var_arg_flags',1,'p_var_arg_flags','parser.py',119),
  ('type -> type_basic PTR','type',2,'p_type','parser.py',131),
  ('type -> type_basic','type',1,'p_type','parser.py',132),
  ('type_basic -> STRUCT STRING','type_basic',2,'p_type_basic','parser.py',140),
  ('type_basic -> UNION STRING','type_basic',2,'p_type_basic','parser.py',141),
  ('type_basic -> STRING','type_basic',1,'p_type_basic','parser.py',142),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',149),
]
